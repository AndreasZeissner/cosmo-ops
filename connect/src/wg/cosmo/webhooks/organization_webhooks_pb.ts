// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file wg/cosmo/webhooks/organization_webhooks.proto (package wg.cosmo.webhooks, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { FederatedGraph } from "./common_pb.js";

/**
 * @generated from enum wg.cosmo.webhooks.OrganizationEventName
 */
export enum OrganizationEventName {
  /**
   * @generated from enum value: GRAPH_SCHEMA_UPDATED = 0;
   */
  GRAPH_SCHEMA_UPDATED = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(OrganizationEventName)
proto3.util.setEnumType(OrganizationEventName, "wg.cosmo.webhooks.OrganizationEventName", [
  { no: 0, name: "GRAPH_SCHEMA_UPDATED" },
]);

/**
 * @generated from message wg.cosmo.webhooks.GraphSchemaUpdate
 */
export class GraphSchemaUpdate extends Message<GraphSchemaUpdate> {
  /**
   * @generated from field: int32 version = 1;
   */
  version = 0;

  /**
   * @generated from field: wg.cosmo.webhooks.FederatedGraph federatedGraph = 2;
   */
  federatedGraph?: FederatedGraph;

  /**
   * @generated from field: bool errors = 3;
   */
  errors = false;

  /**
   * @generated from field: optional string actorID = 4;
   */
  actorID?: string;

  constructor(data?: PartialMessage<GraphSchemaUpdate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wg.cosmo.webhooks.GraphSchemaUpdate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "federatedGraph", kind: "message", T: FederatedGraph },
    { no: 3, name: "errors", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "actorID", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GraphSchemaUpdate {
    return new GraphSchemaUpdate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GraphSchemaUpdate {
    return new GraphSchemaUpdate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GraphSchemaUpdate {
    return new GraphSchemaUpdate().fromJsonString(jsonString, options);
  }

  static equals(a: GraphSchemaUpdate | PlainMessage<GraphSchemaUpdate> | undefined, b: GraphSchemaUpdate | PlainMessage<GraphSchemaUpdate> | undefined): boolean {
    return proto3.util.equals(GraphSchemaUpdate, a, b);
  }
}


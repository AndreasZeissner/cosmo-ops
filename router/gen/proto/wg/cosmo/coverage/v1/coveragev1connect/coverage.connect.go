// https://protobuf.dev/programming-guides/style/

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wg/cosmo/coverage/v1/coverage.proto

package coveragev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/wundergraph/cosmo/router/gen/proto/wg/cosmo/coverage/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CoverageServiceName is the fully-qualified name of the CoverageService service.
	CoverageServiceName = "wg.cosmo.coverage.v1.CoverageService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CoverageServicePublishOperationCoverageReportProcedure is the fully-qualified name of the
	// CoverageService's PublishOperationCoverageReport RPC.
	CoverageServicePublishOperationCoverageReportProcedure = "/wg.cosmo.coverage.v1.CoverageService/PublishOperationCoverageReport"
)

// CoverageServiceClient is a client for the wg.cosmo.coverage.v1.CoverageService service.
type CoverageServiceClient interface {
	// PublishOperationCoverageReport stats to the platform.
	PublishOperationCoverageReport(context.Context, *connect_go.Request[v1.PublishOperationCoverageReportRequest]) (*connect_go.Response[v1.PublishOperationCoverageReportResponse], error)
}

// NewCoverageServiceClient constructs a client for the wg.cosmo.coverage.v1.CoverageService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoverageServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CoverageServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &coverageServiceClient{
		publishOperationCoverageReport: connect_go.NewClient[v1.PublishOperationCoverageReportRequest, v1.PublishOperationCoverageReportResponse](
			httpClient,
			baseURL+CoverageServicePublishOperationCoverageReportProcedure,
			opts...,
		),
	}
}

// coverageServiceClient implements CoverageServiceClient.
type coverageServiceClient struct {
	publishOperationCoverageReport *connect_go.Client[v1.PublishOperationCoverageReportRequest, v1.PublishOperationCoverageReportResponse]
}

// PublishOperationCoverageReport calls
// wg.cosmo.coverage.v1.CoverageService.PublishOperationCoverageReport.
func (c *coverageServiceClient) PublishOperationCoverageReport(ctx context.Context, req *connect_go.Request[v1.PublishOperationCoverageReportRequest]) (*connect_go.Response[v1.PublishOperationCoverageReportResponse], error) {
	return c.publishOperationCoverageReport.CallUnary(ctx, req)
}

// CoverageServiceHandler is an implementation of the wg.cosmo.coverage.v1.CoverageService service.
type CoverageServiceHandler interface {
	// PublishOperationCoverageReport stats to the platform.
	PublishOperationCoverageReport(context.Context, *connect_go.Request[v1.PublishOperationCoverageReportRequest]) (*connect_go.Response[v1.PublishOperationCoverageReportResponse], error)
}

// NewCoverageServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoverageServiceHandler(svc CoverageServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	coverageServicePublishOperationCoverageReportHandler := connect_go.NewUnaryHandler(
		CoverageServicePublishOperationCoverageReportProcedure,
		svc.PublishOperationCoverageReport,
		opts...,
	)
	return "/wg.cosmo.coverage.v1.CoverageService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CoverageServicePublishOperationCoverageReportProcedure:
			coverageServicePublishOperationCoverageReportHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCoverageServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoverageServiceHandler struct{}

func (UnimplementedCoverageServiceHandler) PublishOperationCoverageReport(context.Context, *connect_go.Request[v1.PublishOperationCoverageReportRequest]) (*connect_go.Response[v1.PublishOperationCoverageReportResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.coverage.v1.CoverageService.PublishOperationCoverageReport is not implemented"))
}

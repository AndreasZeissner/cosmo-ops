// https://protobuf.dev/programming-guides/style/

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: wg/cosmo/platform/v1/platform.proto

package platformv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v11 "github.com/wundergraph/cosmo/router/gen/proto/wg/cosmo/node/v1"
	v1 "github.com/wundergraph/cosmo/router/gen/proto/wg/cosmo/platform/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion1_7_0

const (
	// PlatformServiceName is the fully-qualified name of the PlatformService service.
	PlatformServiceName = "wg.cosmo.platform.v1.PlatformService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlatformServiceCreateFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// CreateFederatedGraph RPC.
	PlatformServiceCreateFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFederatedGraph"
	// PlatformServiceCreateFederatedSubgraphProcedure is the fully-qualified name of the
	// PlatformService's CreateFederatedSubgraph RPC.
	PlatformServiceCreateFederatedSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFederatedSubgraph"
	// PlatformServicePublishFederatedSubgraphProcedure is the fully-qualified name of the
	// PlatformService's PublishFederatedSubgraph RPC.
	PlatformServicePublishFederatedSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/PublishFederatedSubgraph"
	// PlatformServiceDeleteFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// DeleteFederatedGraph RPC.
	PlatformServiceDeleteFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteFederatedGraph"
	// PlatformServiceDeleteFederatedSubgraphProcedure is the fully-qualified name of the
	// PlatformService's DeleteFederatedSubgraph RPC.
	PlatformServiceDeleteFederatedSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteFederatedSubgraph"
	// PlatformServiceCheckSubgraphSchemaProcedure is the fully-qualified name of the PlatformService's
	// CheckSubgraphSchema RPC.
	PlatformServiceCheckSubgraphSchemaProcedure = "/wg.cosmo.platform.v1.PlatformService/CheckSubgraphSchema"
	// PlatformServiceFixSubgraphSchemaProcedure is the fully-qualified name of the PlatformService's
	// FixSubgraphSchema RPC.
	PlatformServiceFixSubgraphSchemaProcedure = "/wg.cosmo.platform.v1.PlatformService/FixSubgraphSchema"
	// PlatformServiceUpdateFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// UpdateFederatedGraph RPC.
	PlatformServiceUpdateFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateFederatedGraph"
	// PlatformServiceUpdateSubgraphProcedure is the fully-qualified name of the PlatformService's
	// UpdateSubgraph RPC.
	PlatformServiceUpdateSubgraphProcedure = "/wg.cosmo.platform.v1.PlatformService/UpdateSubgraph"
	// PlatformServiceCheckFederatedGraphProcedure is the fully-qualified name of the PlatformService's
	// CheckFederatedGraph RPC.
	PlatformServiceCheckFederatedGraphProcedure = "/wg.cosmo.platform.v1.PlatformService/CheckFederatedGraph"
	// PlatformServiceWhoAmIProcedure is the fully-qualified name of the PlatformService's WhoAmI RPC.
	PlatformServiceWhoAmIProcedure = "/wg.cosmo.platform.v1.PlatformService/WhoAmI"
	// PlatformServiceGetFederatedGraphsProcedure is the fully-qualified name of the PlatformService's
	// GetFederatedGraphs RPC.
	PlatformServiceGetFederatedGraphsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphs"
	// PlatformServiceGetFederatedGraphByNameProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphByName RPC.
	PlatformServiceGetFederatedGraphByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphByName"
	// PlatformServiceGetFederatedGraphSDLByNameProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphSDLByName RPC.
	PlatformServiceGetFederatedGraphSDLByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphSDLByName"
	// PlatformServiceGetSubgraphsProcedure is the fully-qualified name of the PlatformService's
	// GetSubgraphs RPC.
	PlatformServiceGetSubgraphsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphs"
	// PlatformServiceGetSubgraphByNameProcedure is the fully-qualified name of the PlatformService's
	// GetSubgraphByName RPC.
	PlatformServiceGetSubgraphByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetSubgraphByName"
	// PlatformServiceGetFederatedSubgraphSDLByNameProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedSubgraphSDLByName RPC.
	PlatformServiceGetFederatedSubgraphSDLByNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedSubgraphSDLByName"
	// PlatformServiceGetChecksByFederatedGraphNameProcedure is the fully-qualified name of the
	// PlatformService's GetChecksByFederatedGraphName RPC.
	PlatformServiceGetChecksByFederatedGraphNameProcedure = "/wg.cosmo.platform.v1.PlatformService/GetChecksByFederatedGraphName"
	// PlatformServiceGetCheckDetailsProcedure is the fully-qualified name of the PlatformService's
	// GetCheckDetails RPC.
	PlatformServiceGetCheckDetailsProcedure = "/wg.cosmo.platform.v1.PlatformService/GetCheckDetails"
	// PlatformServiceGetFederatedGraphChangelogProcedure is the fully-qualified name of the
	// PlatformService's GetFederatedGraphChangelog RPC.
	PlatformServiceGetFederatedGraphChangelogProcedure = "/wg.cosmo.platform.v1.PlatformService/GetFederatedGraphChangelog"
	// PlatformServiceCreateFederatedGraphTokenProcedure is the fully-qualified name of the
	// PlatformService's CreateFederatedGraphToken RPC.
	PlatformServiceCreateFederatedGraphTokenProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateFederatedGraphToken"
	// PlatformServiceGetOrganizationMembersProcedure is the fully-qualified name of the
	// PlatformService's GetOrganizationMembers RPC.
	PlatformServiceGetOrganizationMembersProcedure = "/wg.cosmo.platform.v1.PlatformService/GetOrganizationMembers"
	// PlatformServiceInviteUserProcedure is the fully-qualified name of the PlatformService's
	// InviteUser RPC.
	PlatformServiceInviteUserProcedure = "/wg.cosmo.platform.v1.PlatformService/InviteUser"
	// PlatformServiceGetAPIKeysProcedure is the fully-qualified name of the PlatformService's
	// GetAPIKeys RPC.
	PlatformServiceGetAPIKeysProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAPIKeys"
	// PlatformServiceCreateAPIKeyProcedure is the fully-qualified name of the PlatformService's
	// CreateAPIKey RPC.
	PlatformServiceCreateAPIKeyProcedure = "/wg.cosmo.platform.v1.PlatformService/CreateAPIKey"
	// PlatformServiceDeleteAPIKeyProcedure is the fully-qualified name of the PlatformService's
	// DeleteAPIKey RPC.
	PlatformServiceDeleteAPIKeyProcedure = "/wg.cosmo.platform.v1.PlatformService/DeleteAPIKey"
	// PlatformServiceRemoveInvitationProcedure is the fully-qualified name of the PlatformService's
	// RemoveInvitation RPC.
	PlatformServiceRemoveInvitationProcedure = "/wg.cosmo.platform.v1.PlatformService/RemoveInvitation"
	// PlatformServiceGetLatestValidRouterConfigProcedure is the fully-qualified name of the
	// PlatformService's GetLatestValidRouterConfig RPC.
	PlatformServiceGetLatestValidRouterConfigProcedure = "/wg.cosmo.platform.v1.PlatformService/GetLatestValidRouterConfig"
	// PlatformServiceMigrateFromApolloProcedure is the fully-qualified name of the PlatformService's
	// MigrateFromApollo RPC.
	PlatformServiceMigrateFromApolloProcedure = "/wg.cosmo.platform.v1.PlatformService/MigrateFromApollo"
	// PlatformServiceGetAnalyticsViewProcedure is the fully-qualified name of the PlatformService's
	// GetAnalyticsView RPC.
	PlatformServiceGetAnalyticsViewProcedure = "/wg.cosmo.platform.v1.PlatformService/GetAnalyticsView"
	// PlatformServiceGetDashboardAnalyticsViewProcedure is the fully-qualified name of the
	// PlatformService's GetDashboardAnalyticsView RPC.
	PlatformServiceGetDashboardAnalyticsViewProcedure = "/wg.cosmo.platform.v1.PlatformService/GetDashboardAnalyticsView"
	// PlatformServiceGetTraceProcedure is the fully-qualified name of the PlatformService's GetTrace
	// RPC.
	PlatformServiceGetTraceProcedure = "/wg.cosmo.platform.v1.PlatformService/GetTrace"
)

// PlatformServiceClient is a client for the wg.cosmo.platform.v1.PlatformService service.
type PlatformServiceClient interface {
	// CreateFederatedGraph creates a federated graph on the control plane.
	CreateFederatedGraph(context.Context, *connect_go.Request[v1.CreateFederatedGraphRequest]) (*connect_go.Response[v1.CreateFederatedGraphResponse], error)
	// CreateFederatedSubgraph creates a federated subgraph on the control plane.
	CreateFederatedSubgraph(context.Context, *connect_go.Request[v1.CreateFederatedSubgraphRequest]) (*connect_go.Response[v1.CreateFederatedSubgraphResponse], error)
	// PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
	PublishFederatedSubgraph(context.Context, *connect_go.Request[v1.PublishFederatedSubgraphRequest]) (*connect_go.Response[v1.PublishFederatedSubgraphResponse], error)
	// DeleteFederatedGraph deletes a federated graph from the control plane.
	DeleteFederatedGraph(context.Context, *connect_go.Request[v1.DeleteFederatedGraphRequest]) (*connect_go.Response[v1.DeleteFederatedGraphResponse], error)
	// DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
	DeleteFederatedSubgraph(context.Context, *connect_go.Request[v1.DeleteFederatedSubgraphRequest]) (*connect_go.Response[v1.DeleteFederatedSubgraphResponse], error)
	// CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
	CheckSubgraphSchema(context.Context, *connect_go.Request[v1.CheckSubgraphSchemaRequest]) (*connect_go.Response[v1.CheckSubgraphSchemaResponse], error)
	FixSubgraphSchema(context.Context, *connect_go.Request[v1.FixSubgraphSchemaRequest]) (*connect_go.Response[v1.FixSubgraphSchemaResponse], error)
	// UpdateFederatedGraph updates a federated graph with new labels and routing url
	UpdateFederatedGraph(context.Context, *connect_go.Request[v1.UpdateFederatedGraphRequest]) (*connect_go.Response[v1.UpdateFederatedGraphResponse], error)
	// UpdateSubgraph updates a subgraph with new labels and routing url
	UpdateSubgraph(context.Context, *connect_go.Request[v1.UpdateSubgraphRequest]) (*connect_go.Response[v1.UpdateSubgraphResponse], error)
	// CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
	CheckFederatedGraph(context.Context, *connect_go.Request[v1.CheckFederatedGraphRequest]) (*connect_go.Response[v1.CheckFederatedGraphResponse], error)
	// WhoAmI returns the identity of the user currently logged in.
	WhoAmI(context.Context, *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIResponse], error)
	// GetFederatedGraphs returns the list of federated graphs.
	GetFederatedGraphs(context.Context, *connect_go.Request[v1.GetFederatedGraphsRequest]) (*connect_go.Response[v1.GetFederatedGraphsResponse], error)
	// GetFederatedGraphByName returns the federated graph by name.
	GetFederatedGraphByName(context.Context, *connect_go.Request[v1.GetFederatedGraphByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphByNameResponse], error)
	// GetFederatedGraphSDLByName returns the SDL of the federated graph by name.
	GetFederatedGraphSDLByName(context.Context, *connect_go.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphSDLByNameResponse], error)
	// GetSubgraphs returns the list of subgraphs.
	GetSubgraphs(context.Context, *connect_go.Request[v1.GetSubgraphsRequest]) (*connect_go.Response[v1.GetSubgraphsResponse], error)
	// GetSubgraphByName returns the subgraph by name.
	GetSubgraphByName(context.Context, *connect_go.Request[v1.GetSubgraphByNameRequest]) (*connect_go.Response[v1.GetSubgraphByNameResponse], error)
	// GetFederatedSubgraphSDLByName returns the SDL of the subgraph by name.
	GetFederatedSubgraphSDLByName(context.Context, *connect_go.Request[v1.GetFederatedSubgraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedSubgraphSDLByNameResponse], error)
	// GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
	GetChecksByFederatedGraphName(context.Context, *connect_go.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect_go.Response[v1.GetChecksByFederatedGraphNameResponse], error)
	// GetCheckDetails returns changes and composition errors recorded for a check
	GetCheckDetails(context.Context, *connect_go.Request[v1.GetCheckDetailsRequest]) (*connect_go.Response[v1.GetCheckDetailsResponse], error)
	// GetFederatedGraphChangelog returns the changelog of the federated graph.
	GetFederatedGraphChangelog(context.Context, *connect_go.Request[v1.GetFederatedGraphChangelogRequest]) (*connect_go.Response[v1.GetFederatedGraphChangelogResponse], error)
	// CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
	CreateFederatedGraphToken(context.Context, *connect_go.Request[v1.CreateFederatedGraphTokenRequest]) (*connect_go.Response[v1.CreateFederatedGraphTokenResponse], error)
	// GetOrganizationMembers returns the list of organization members
	GetOrganizationMembers(context.Context, *connect_go.Request[v1.GetOrganizationMembersRequest]) (*connect_go.Response[v1.GetOrganizationMembersResponse], error)
	// InviteUser invites an user to join the organization
	InviteUser(context.Context, *connect_go.Request[v1.InviteUserRequest]) (*connect_go.Response[v1.InviteUserResponse], error)
	// GetAPIKeys returns a list of API keys of the organization
	GetAPIKeys(context.Context, *connect_go.Request[v1.GetAPIKeysRequest]) (*connect_go.Response[v1.GetAPIKeysResponse], error)
	// CreateAPIKey creates an API key for the organization
	CreateAPIKey(context.Context, *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error)
	// DeleteAPIKey deletes an API key for the organization
	DeleteAPIKey(context.Context, *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error)
	// RemoveOrganizationMember removes the user from the organization
	RemoveInvitation(context.Context, *connect_go.Request[v1.RemoveInvitationRequest]) (*connect_go.Response[v1.RemoveInvitationResponse], error)
	// GetLatestValidRouterConfig returns the router config for the federated graph
	GetLatestValidRouterConfig(context.Context, *connect_go.Request[v11.GetConfigRequest]) (*connect_go.Response[v11.GetConfigResponse], error)
	// MigrateFromApollo migrates the graphs from apollo to cosmo
	MigrateFromApollo(context.Context, *connect_go.Request[v1.MigrateFromApolloRequest]) (*connect_go.Response[v1.MigrateFromApolloResponse], error)
	GetAnalyticsView(context.Context, *connect_go.Request[v1.GetAnalyticsViewRequest]) (*connect_go.Response[v1.GetAnalyticsViewResponse], error)
	GetDashboardAnalyticsView(context.Context, *connect_go.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect_go.Response[v1.GetDashboardAnalyticsViewResponse], error)
	GetTrace(context.Context, *connect_go.Request[v1.GetTraceRequest]) (*connect_go.Response[v1.GetTraceResponse], error)
}

// NewPlatformServiceClient constructs a client for the wg.cosmo.platform.v1.PlatformService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlatformServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) PlatformServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &platformServiceClient{
		createFederatedGraph: connect_go.NewClient[v1.CreateFederatedGraphRequest, v1.CreateFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceCreateFederatedGraphProcedure,
			opts...,
		),
		createFederatedSubgraph: connect_go.NewClient[v1.CreateFederatedSubgraphRequest, v1.CreateFederatedSubgraphResponse](
			httpClient,
			baseURL+PlatformServiceCreateFederatedSubgraphProcedure,
			opts...,
		),
		publishFederatedSubgraph: connect_go.NewClient[v1.PublishFederatedSubgraphRequest, v1.PublishFederatedSubgraphResponse](
			httpClient,
			baseURL+PlatformServicePublishFederatedSubgraphProcedure,
			opts...,
		),
		deleteFederatedGraph: connect_go.NewClient[v1.DeleteFederatedGraphRequest, v1.DeleteFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceDeleteFederatedGraphProcedure,
			opts...,
		),
		deleteFederatedSubgraph: connect_go.NewClient[v1.DeleteFederatedSubgraphRequest, v1.DeleteFederatedSubgraphResponse](
			httpClient,
			baseURL+PlatformServiceDeleteFederatedSubgraphProcedure,
			opts...,
		),
		checkSubgraphSchema: connect_go.NewClient[v1.CheckSubgraphSchemaRequest, v1.CheckSubgraphSchemaResponse](
			httpClient,
			baseURL+PlatformServiceCheckSubgraphSchemaProcedure,
			opts...,
		),
		fixSubgraphSchema: connect_go.NewClient[v1.FixSubgraphSchemaRequest, v1.FixSubgraphSchemaResponse](
			httpClient,
			baseURL+PlatformServiceFixSubgraphSchemaProcedure,
			opts...,
		),
		updateFederatedGraph: connect_go.NewClient[v1.UpdateFederatedGraphRequest, v1.UpdateFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceUpdateFederatedGraphProcedure,
			opts...,
		),
		updateSubgraph: connect_go.NewClient[v1.UpdateSubgraphRequest, v1.UpdateSubgraphResponse](
			httpClient,
			baseURL+PlatformServiceUpdateSubgraphProcedure,
			opts...,
		),
		checkFederatedGraph: connect_go.NewClient[v1.CheckFederatedGraphRequest, v1.CheckFederatedGraphResponse](
			httpClient,
			baseURL+PlatformServiceCheckFederatedGraphProcedure,
			opts...,
		),
		whoAmI: connect_go.NewClient[v1.WhoAmIRequest, v1.WhoAmIResponse](
			httpClient,
			baseURL+PlatformServiceWhoAmIProcedure,
			opts...,
		),
		getFederatedGraphs: connect_go.NewClient[v1.GetFederatedGraphsRequest, v1.GetFederatedGraphsResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphsProcedure,
			opts...,
		),
		getFederatedGraphByName: connect_go.NewClient[v1.GetFederatedGraphByNameRequest, v1.GetFederatedGraphByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphByNameProcedure,
			opts...,
		),
		getFederatedGraphSDLByName: connect_go.NewClient[v1.GetFederatedGraphSDLByNameRequest, v1.GetFederatedGraphSDLByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphSDLByNameProcedure,
			opts...,
		),
		getSubgraphs: connect_go.NewClient[v1.GetSubgraphsRequest, v1.GetSubgraphsResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphsProcedure,
			opts...,
		),
		getSubgraphByName: connect_go.NewClient[v1.GetSubgraphByNameRequest, v1.GetSubgraphByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetSubgraphByNameProcedure,
			opts...,
		),
		getFederatedSubgraphSDLByName: connect_go.NewClient[v1.GetFederatedSubgraphSDLByNameRequest, v1.GetFederatedSubgraphSDLByNameResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedSubgraphSDLByNameProcedure,
			opts...,
		),
		getChecksByFederatedGraphName: connect_go.NewClient[v1.GetChecksByFederatedGraphNameRequest, v1.GetChecksByFederatedGraphNameResponse](
			httpClient,
			baseURL+PlatformServiceGetChecksByFederatedGraphNameProcedure,
			opts...,
		),
		getCheckDetails: connect_go.NewClient[v1.GetCheckDetailsRequest, v1.GetCheckDetailsResponse](
			httpClient,
			baseURL+PlatformServiceGetCheckDetailsProcedure,
			opts...,
		),
		getFederatedGraphChangelog: connect_go.NewClient[v1.GetFederatedGraphChangelogRequest, v1.GetFederatedGraphChangelogResponse](
			httpClient,
			baseURL+PlatformServiceGetFederatedGraphChangelogProcedure,
			opts...,
		),
		createFederatedGraphToken: connect_go.NewClient[v1.CreateFederatedGraphTokenRequest, v1.CreateFederatedGraphTokenResponse](
			httpClient,
			baseURL+PlatformServiceCreateFederatedGraphTokenProcedure,
			opts...,
		),
		getOrganizationMembers: connect_go.NewClient[v1.GetOrganizationMembersRequest, v1.GetOrganizationMembersResponse](
			httpClient,
			baseURL+PlatformServiceGetOrganizationMembersProcedure,
			opts...,
		),
		inviteUser: connect_go.NewClient[v1.InviteUserRequest, v1.InviteUserResponse](
			httpClient,
			baseURL+PlatformServiceInviteUserProcedure,
			opts...,
		),
		getAPIKeys: connect_go.NewClient[v1.GetAPIKeysRequest, v1.GetAPIKeysResponse](
			httpClient,
			baseURL+PlatformServiceGetAPIKeysProcedure,
			opts...,
		),
		createAPIKey: connect_go.NewClient[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse](
			httpClient,
			baseURL+PlatformServiceCreateAPIKeyProcedure,
			opts...,
		),
		deleteAPIKey: connect_go.NewClient[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse](
			httpClient,
			baseURL+PlatformServiceDeleteAPIKeyProcedure,
			opts...,
		),
		removeInvitation: connect_go.NewClient[v1.RemoveInvitationRequest, v1.RemoveInvitationResponse](
			httpClient,
			baseURL+PlatformServiceRemoveInvitationProcedure,
			opts...,
		),
		getLatestValidRouterConfig: connect_go.NewClient[v11.GetConfigRequest, v11.GetConfigResponse](
			httpClient,
			baseURL+PlatformServiceGetLatestValidRouterConfigProcedure,
			opts...,
		),
		migrateFromApollo: connect_go.NewClient[v1.MigrateFromApolloRequest, v1.MigrateFromApolloResponse](
			httpClient,
			baseURL+PlatformServiceMigrateFromApolloProcedure,
			opts...,
		),
		getAnalyticsView: connect_go.NewClient[v1.GetAnalyticsViewRequest, v1.GetAnalyticsViewResponse](
			httpClient,
			baseURL+PlatformServiceGetAnalyticsViewProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getDashboardAnalyticsView: connect_go.NewClient[v1.GetDashboardAnalyticsViewRequest, v1.GetDashboardAnalyticsViewResponse](
			httpClient,
			baseURL+PlatformServiceGetDashboardAnalyticsViewProcedure,
			connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
			connect_go.WithClientOptions(opts...),
		),
		getTrace: connect_go.NewClient[v1.GetTraceRequest, v1.GetTraceResponse](
			httpClient,
			baseURL+PlatformServiceGetTraceProcedure,
			opts...,
		),
	}
}

// platformServiceClient implements PlatformServiceClient.
type platformServiceClient struct {
	createFederatedGraph          *connect_go.Client[v1.CreateFederatedGraphRequest, v1.CreateFederatedGraphResponse]
	createFederatedSubgraph       *connect_go.Client[v1.CreateFederatedSubgraphRequest, v1.CreateFederatedSubgraphResponse]
	publishFederatedSubgraph      *connect_go.Client[v1.PublishFederatedSubgraphRequest, v1.PublishFederatedSubgraphResponse]
	deleteFederatedGraph          *connect_go.Client[v1.DeleteFederatedGraphRequest, v1.DeleteFederatedGraphResponse]
	deleteFederatedSubgraph       *connect_go.Client[v1.DeleteFederatedSubgraphRequest, v1.DeleteFederatedSubgraphResponse]
	checkSubgraphSchema           *connect_go.Client[v1.CheckSubgraphSchemaRequest, v1.CheckSubgraphSchemaResponse]
	fixSubgraphSchema             *connect_go.Client[v1.FixSubgraphSchemaRequest, v1.FixSubgraphSchemaResponse]
	updateFederatedGraph          *connect_go.Client[v1.UpdateFederatedGraphRequest, v1.UpdateFederatedGraphResponse]
	updateSubgraph                *connect_go.Client[v1.UpdateSubgraphRequest, v1.UpdateSubgraphResponse]
	checkFederatedGraph           *connect_go.Client[v1.CheckFederatedGraphRequest, v1.CheckFederatedGraphResponse]
	whoAmI                        *connect_go.Client[v1.WhoAmIRequest, v1.WhoAmIResponse]
	getFederatedGraphs            *connect_go.Client[v1.GetFederatedGraphsRequest, v1.GetFederatedGraphsResponse]
	getFederatedGraphByName       *connect_go.Client[v1.GetFederatedGraphByNameRequest, v1.GetFederatedGraphByNameResponse]
	getFederatedGraphSDLByName    *connect_go.Client[v1.GetFederatedGraphSDLByNameRequest, v1.GetFederatedGraphSDLByNameResponse]
	getSubgraphs                  *connect_go.Client[v1.GetSubgraphsRequest, v1.GetSubgraphsResponse]
	getSubgraphByName             *connect_go.Client[v1.GetSubgraphByNameRequest, v1.GetSubgraphByNameResponse]
	getFederatedSubgraphSDLByName *connect_go.Client[v1.GetFederatedSubgraphSDLByNameRequest, v1.GetFederatedSubgraphSDLByNameResponse]
	getChecksByFederatedGraphName *connect_go.Client[v1.GetChecksByFederatedGraphNameRequest, v1.GetChecksByFederatedGraphNameResponse]
	getCheckDetails               *connect_go.Client[v1.GetCheckDetailsRequest, v1.GetCheckDetailsResponse]
	getFederatedGraphChangelog    *connect_go.Client[v1.GetFederatedGraphChangelogRequest, v1.GetFederatedGraphChangelogResponse]
	createFederatedGraphToken     *connect_go.Client[v1.CreateFederatedGraphTokenRequest, v1.CreateFederatedGraphTokenResponse]
	getOrganizationMembers        *connect_go.Client[v1.GetOrganizationMembersRequest, v1.GetOrganizationMembersResponse]
	inviteUser                    *connect_go.Client[v1.InviteUserRequest, v1.InviteUserResponse]
	getAPIKeys                    *connect_go.Client[v1.GetAPIKeysRequest, v1.GetAPIKeysResponse]
	createAPIKey                  *connect_go.Client[v1.CreateAPIKeyRequest, v1.CreateAPIKeyResponse]
	deleteAPIKey                  *connect_go.Client[v1.DeleteAPIKeyRequest, v1.DeleteAPIKeyResponse]
	removeInvitation              *connect_go.Client[v1.RemoveInvitationRequest, v1.RemoveInvitationResponse]
	getLatestValidRouterConfig    *connect_go.Client[v11.GetConfigRequest, v11.GetConfigResponse]
	migrateFromApollo             *connect_go.Client[v1.MigrateFromApolloRequest, v1.MigrateFromApolloResponse]
	getAnalyticsView              *connect_go.Client[v1.GetAnalyticsViewRequest, v1.GetAnalyticsViewResponse]
	getDashboardAnalyticsView     *connect_go.Client[v1.GetDashboardAnalyticsViewRequest, v1.GetDashboardAnalyticsViewResponse]
	getTrace                      *connect_go.Client[v1.GetTraceRequest, v1.GetTraceResponse]
}

// CreateFederatedGraph calls wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph.
func (c *platformServiceClient) CreateFederatedGraph(ctx context.Context, req *connect_go.Request[v1.CreateFederatedGraphRequest]) (*connect_go.Response[v1.CreateFederatedGraphResponse], error) {
	return c.createFederatedGraph.CallUnary(ctx, req)
}

// CreateFederatedSubgraph calls wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph.
func (c *platformServiceClient) CreateFederatedSubgraph(ctx context.Context, req *connect_go.Request[v1.CreateFederatedSubgraphRequest]) (*connect_go.Response[v1.CreateFederatedSubgraphResponse], error) {
	return c.createFederatedSubgraph.CallUnary(ctx, req)
}

// PublishFederatedSubgraph calls wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph.
func (c *platformServiceClient) PublishFederatedSubgraph(ctx context.Context, req *connect_go.Request[v1.PublishFederatedSubgraphRequest]) (*connect_go.Response[v1.PublishFederatedSubgraphResponse], error) {
	return c.publishFederatedSubgraph.CallUnary(ctx, req)
}

// DeleteFederatedGraph calls wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph.
func (c *platformServiceClient) DeleteFederatedGraph(ctx context.Context, req *connect_go.Request[v1.DeleteFederatedGraphRequest]) (*connect_go.Response[v1.DeleteFederatedGraphResponse], error) {
	return c.deleteFederatedGraph.CallUnary(ctx, req)
}

// DeleteFederatedSubgraph calls wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph.
func (c *platformServiceClient) DeleteFederatedSubgraph(ctx context.Context, req *connect_go.Request[v1.DeleteFederatedSubgraphRequest]) (*connect_go.Response[v1.DeleteFederatedSubgraphResponse], error) {
	return c.deleteFederatedSubgraph.CallUnary(ctx, req)
}

// CheckSubgraphSchema calls wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema.
func (c *platformServiceClient) CheckSubgraphSchema(ctx context.Context, req *connect_go.Request[v1.CheckSubgraphSchemaRequest]) (*connect_go.Response[v1.CheckSubgraphSchemaResponse], error) {
	return c.checkSubgraphSchema.CallUnary(ctx, req)
}

// FixSubgraphSchema calls wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema.
func (c *platformServiceClient) FixSubgraphSchema(ctx context.Context, req *connect_go.Request[v1.FixSubgraphSchemaRequest]) (*connect_go.Response[v1.FixSubgraphSchemaResponse], error) {
	return c.fixSubgraphSchema.CallUnary(ctx, req)
}

// UpdateFederatedGraph calls wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph.
func (c *platformServiceClient) UpdateFederatedGraph(ctx context.Context, req *connect_go.Request[v1.UpdateFederatedGraphRequest]) (*connect_go.Response[v1.UpdateFederatedGraphResponse], error) {
	return c.updateFederatedGraph.CallUnary(ctx, req)
}

// UpdateSubgraph calls wg.cosmo.platform.v1.PlatformService.UpdateSubgraph.
func (c *platformServiceClient) UpdateSubgraph(ctx context.Context, req *connect_go.Request[v1.UpdateSubgraphRequest]) (*connect_go.Response[v1.UpdateSubgraphResponse], error) {
	return c.updateSubgraph.CallUnary(ctx, req)
}

// CheckFederatedGraph calls wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph.
func (c *platformServiceClient) CheckFederatedGraph(ctx context.Context, req *connect_go.Request[v1.CheckFederatedGraphRequest]) (*connect_go.Response[v1.CheckFederatedGraphResponse], error) {
	return c.checkFederatedGraph.CallUnary(ctx, req)
}

// WhoAmI calls wg.cosmo.platform.v1.PlatformService.WhoAmI.
func (c *platformServiceClient) WhoAmI(ctx context.Context, req *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIResponse], error) {
	return c.whoAmI.CallUnary(ctx, req)
}

// GetFederatedGraphs calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs.
func (c *platformServiceClient) GetFederatedGraphs(ctx context.Context, req *connect_go.Request[v1.GetFederatedGraphsRequest]) (*connect_go.Response[v1.GetFederatedGraphsResponse], error) {
	return c.getFederatedGraphs.CallUnary(ctx, req)
}

// GetFederatedGraphByName calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName.
func (c *platformServiceClient) GetFederatedGraphByName(ctx context.Context, req *connect_go.Request[v1.GetFederatedGraphByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphByNameResponse], error) {
	return c.getFederatedGraphByName.CallUnary(ctx, req)
}

// GetFederatedGraphSDLByName calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName.
func (c *platformServiceClient) GetFederatedGraphSDLByName(ctx context.Context, req *connect_go.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphSDLByNameResponse], error) {
	return c.getFederatedGraphSDLByName.CallUnary(ctx, req)
}

// GetSubgraphs calls wg.cosmo.platform.v1.PlatformService.GetSubgraphs.
func (c *platformServiceClient) GetSubgraphs(ctx context.Context, req *connect_go.Request[v1.GetSubgraphsRequest]) (*connect_go.Response[v1.GetSubgraphsResponse], error) {
	return c.getSubgraphs.CallUnary(ctx, req)
}

// GetSubgraphByName calls wg.cosmo.platform.v1.PlatformService.GetSubgraphByName.
func (c *platformServiceClient) GetSubgraphByName(ctx context.Context, req *connect_go.Request[v1.GetSubgraphByNameRequest]) (*connect_go.Response[v1.GetSubgraphByNameResponse], error) {
	return c.getSubgraphByName.CallUnary(ctx, req)
}

// GetFederatedSubgraphSDLByName calls
// wg.cosmo.platform.v1.PlatformService.GetFederatedSubgraphSDLByName.
func (c *platformServiceClient) GetFederatedSubgraphSDLByName(ctx context.Context, req *connect_go.Request[v1.GetFederatedSubgraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedSubgraphSDLByNameResponse], error) {
	return c.getFederatedSubgraphSDLByName.CallUnary(ctx, req)
}

// GetChecksByFederatedGraphName calls
// wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName.
func (c *platformServiceClient) GetChecksByFederatedGraphName(ctx context.Context, req *connect_go.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect_go.Response[v1.GetChecksByFederatedGraphNameResponse], error) {
	return c.getChecksByFederatedGraphName.CallUnary(ctx, req)
}

// GetCheckDetails calls wg.cosmo.platform.v1.PlatformService.GetCheckDetails.
func (c *platformServiceClient) GetCheckDetails(ctx context.Context, req *connect_go.Request[v1.GetCheckDetailsRequest]) (*connect_go.Response[v1.GetCheckDetailsResponse], error) {
	return c.getCheckDetails.CallUnary(ctx, req)
}

// GetFederatedGraphChangelog calls wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog.
func (c *platformServiceClient) GetFederatedGraphChangelog(ctx context.Context, req *connect_go.Request[v1.GetFederatedGraphChangelogRequest]) (*connect_go.Response[v1.GetFederatedGraphChangelogResponse], error) {
	return c.getFederatedGraphChangelog.CallUnary(ctx, req)
}

// CreateFederatedGraphToken calls wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken.
func (c *platformServiceClient) CreateFederatedGraphToken(ctx context.Context, req *connect_go.Request[v1.CreateFederatedGraphTokenRequest]) (*connect_go.Response[v1.CreateFederatedGraphTokenResponse], error) {
	return c.createFederatedGraphToken.CallUnary(ctx, req)
}

// GetOrganizationMembers calls wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers.
func (c *platformServiceClient) GetOrganizationMembers(ctx context.Context, req *connect_go.Request[v1.GetOrganizationMembersRequest]) (*connect_go.Response[v1.GetOrganizationMembersResponse], error) {
	return c.getOrganizationMembers.CallUnary(ctx, req)
}

// InviteUser calls wg.cosmo.platform.v1.PlatformService.InviteUser.
func (c *platformServiceClient) InviteUser(ctx context.Context, req *connect_go.Request[v1.InviteUserRequest]) (*connect_go.Response[v1.InviteUserResponse], error) {
	return c.inviteUser.CallUnary(ctx, req)
}

// GetAPIKeys calls wg.cosmo.platform.v1.PlatformService.GetAPIKeys.
func (c *platformServiceClient) GetAPIKeys(ctx context.Context, req *connect_go.Request[v1.GetAPIKeysRequest]) (*connect_go.Response[v1.GetAPIKeysResponse], error) {
	return c.getAPIKeys.CallUnary(ctx, req)
}

// CreateAPIKey calls wg.cosmo.platform.v1.PlatformService.CreateAPIKey.
func (c *platformServiceClient) CreateAPIKey(ctx context.Context, req *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error) {
	return c.createAPIKey.CallUnary(ctx, req)
}

// DeleteAPIKey calls wg.cosmo.platform.v1.PlatformService.DeleteAPIKey.
func (c *platformServiceClient) DeleteAPIKey(ctx context.Context, req *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error) {
	return c.deleteAPIKey.CallUnary(ctx, req)
}

// RemoveInvitation calls wg.cosmo.platform.v1.PlatformService.RemoveInvitation.
func (c *platformServiceClient) RemoveInvitation(ctx context.Context, req *connect_go.Request[v1.RemoveInvitationRequest]) (*connect_go.Response[v1.RemoveInvitationResponse], error) {
	return c.removeInvitation.CallUnary(ctx, req)
}

// GetLatestValidRouterConfig calls wg.cosmo.platform.v1.PlatformService.GetLatestValidRouterConfig.
func (c *platformServiceClient) GetLatestValidRouterConfig(ctx context.Context, req *connect_go.Request[v11.GetConfigRequest]) (*connect_go.Response[v11.GetConfigResponse], error) {
	return c.getLatestValidRouterConfig.CallUnary(ctx, req)
}

// MigrateFromApollo calls wg.cosmo.platform.v1.PlatformService.MigrateFromApollo.
func (c *platformServiceClient) MigrateFromApollo(ctx context.Context, req *connect_go.Request[v1.MigrateFromApolloRequest]) (*connect_go.Response[v1.MigrateFromApolloResponse], error) {
	return c.migrateFromApollo.CallUnary(ctx, req)
}

// GetAnalyticsView calls wg.cosmo.platform.v1.PlatformService.GetAnalyticsView.
func (c *platformServiceClient) GetAnalyticsView(ctx context.Context, req *connect_go.Request[v1.GetAnalyticsViewRequest]) (*connect_go.Response[v1.GetAnalyticsViewResponse], error) {
	return c.getAnalyticsView.CallUnary(ctx, req)
}

// GetDashboardAnalyticsView calls wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView.
func (c *platformServiceClient) GetDashboardAnalyticsView(ctx context.Context, req *connect_go.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect_go.Response[v1.GetDashboardAnalyticsViewResponse], error) {
	return c.getDashboardAnalyticsView.CallUnary(ctx, req)
}

// GetTrace calls wg.cosmo.platform.v1.PlatformService.GetTrace.
func (c *platformServiceClient) GetTrace(ctx context.Context, req *connect_go.Request[v1.GetTraceRequest]) (*connect_go.Response[v1.GetTraceResponse], error) {
	return c.getTrace.CallUnary(ctx, req)
}

// PlatformServiceHandler is an implementation of the wg.cosmo.platform.v1.PlatformService service.
type PlatformServiceHandler interface {
	// CreateFederatedGraph creates a federated graph on the control plane.
	CreateFederatedGraph(context.Context, *connect_go.Request[v1.CreateFederatedGraphRequest]) (*connect_go.Response[v1.CreateFederatedGraphResponse], error)
	// CreateFederatedSubgraph creates a federated subgraph on the control plane.
	CreateFederatedSubgraph(context.Context, *connect_go.Request[v1.CreateFederatedSubgraphRequest]) (*connect_go.Response[v1.CreateFederatedSubgraphResponse], error)
	// PublishFederatedSubgraph pushes the schema of the subgraph to the control plane.
	PublishFederatedSubgraph(context.Context, *connect_go.Request[v1.PublishFederatedSubgraphRequest]) (*connect_go.Response[v1.PublishFederatedSubgraphResponse], error)
	// DeleteFederatedGraph deletes a federated graph from the control plane.
	DeleteFederatedGraph(context.Context, *connect_go.Request[v1.DeleteFederatedGraphRequest]) (*connect_go.Response[v1.DeleteFederatedGraphResponse], error)
	// DeleteFederatedSubgraph deletes a federated subgraph from the control plane.
	DeleteFederatedSubgraph(context.Context, *connect_go.Request[v1.DeleteFederatedSubgraphRequest]) (*connect_go.Response[v1.DeleteFederatedSubgraphResponse], error)
	// CheckSubgraphSchema checks if the schema is valid and if it can be composed without conflicts with the provided new subgraph schema.
	CheckSubgraphSchema(context.Context, *connect_go.Request[v1.CheckSubgraphSchemaRequest]) (*connect_go.Response[v1.CheckSubgraphSchemaResponse], error)
	FixSubgraphSchema(context.Context, *connect_go.Request[v1.FixSubgraphSchemaRequest]) (*connect_go.Response[v1.FixSubgraphSchemaResponse], error)
	// UpdateFederatedGraph updates a federated graph with new labels and routing url
	UpdateFederatedGraph(context.Context, *connect_go.Request[v1.UpdateFederatedGraphRequest]) (*connect_go.Response[v1.UpdateFederatedGraphResponse], error)
	// UpdateSubgraph updates a subgraph with new labels and routing url
	UpdateSubgraph(context.Context, *connect_go.Request[v1.UpdateSubgraphRequest]) (*connect_go.Response[v1.UpdateSubgraphResponse], error)
	// CheckFederatedGraph checks if the federated graph can be composed with the new labels provided.
	CheckFederatedGraph(context.Context, *connect_go.Request[v1.CheckFederatedGraphRequest]) (*connect_go.Response[v1.CheckFederatedGraphResponse], error)
	// WhoAmI returns the identity of the user currently logged in.
	WhoAmI(context.Context, *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIResponse], error)
	// GetFederatedGraphs returns the list of federated graphs.
	GetFederatedGraphs(context.Context, *connect_go.Request[v1.GetFederatedGraphsRequest]) (*connect_go.Response[v1.GetFederatedGraphsResponse], error)
	// GetFederatedGraphByName returns the federated graph by name.
	GetFederatedGraphByName(context.Context, *connect_go.Request[v1.GetFederatedGraphByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphByNameResponse], error)
	// GetFederatedGraphSDLByName returns the SDL of the federated graph by name.
	GetFederatedGraphSDLByName(context.Context, *connect_go.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphSDLByNameResponse], error)
	// GetSubgraphs returns the list of subgraphs.
	GetSubgraphs(context.Context, *connect_go.Request[v1.GetSubgraphsRequest]) (*connect_go.Response[v1.GetSubgraphsResponse], error)
	// GetSubgraphByName returns the subgraph by name.
	GetSubgraphByName(context.Context, *connect_go.Request[v1.GetSubgraphByNameRequest]) (*connect_go.Response[v1.GetSubgraphByNameResponse], error)
	// GetFederatedSubgraphSDLByName returns the SDL of the subgraph by name.
	GetFederatedSubgraphSDLByName(context.Context, *connect_go.Request[v1.GetFederatedSubgraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedSubgraphSDLByNameResponse], error)
	// GetChecksByFederatedGraphName return schema and composition checks that concern a federated graph
	GetChecksByFederatedGraphName(context.Context, *connect_go.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect_go.Response[v1.GetChecksByFederatedGraphNameResponse], error)
	// GetCheckDetails returns changes and composition errors recorded for a check
	GetCheckDetails(context.Context, *connect_go.Request[v1.GetCheckDetailsRequest]) (*connect_go.Response[v1.GetCheckDetailsResponse], error)
	// GetFederatedGraphChangelog returns the changelog of the federated graph.
	GetFederatedGraphChangelog(context.Context, *connect_go.Request[v1.GetFederatedGraphChangelogRequest]) (*connect_go.Response[v1.GetFederatedGraphChangelogResponse], error)
	// CreateFederatedGraphToken creates a federated graph token that is consumed by the router to authenticate requests.
	CreateFederatedGraphToken(context.Context, *connect_go.Request[v1.CreateFederatedGraphTokenRequest]) (*connect_go.Response[v1.CreateFederatedGraphTokenResponse], error)
	// GetOrganizationMembers returns the list of organization members
	GetOrganizationMembers(context.Context, *connect_go.Request[v1.GetOrganizationMembersRequest]) (*connect_go.Response[v1.GetOrganizationMembersResponse], error)
	// InviteUser invites an user to join the organization
	InviteUser(context.Context, *connect_go.Request[v1.InviteUserRequest]) (*connect_go.Response[v1.InviteUserResponse], error)
	// GetAPIKeys returns a list of API keys of the organization
	GetAPIKeys(context.Context, *connect_go.Request[v1.GetAPIKeysRequest]) (*connect_go.Response[v1.GetAPIKeysResponse], error)
	// CreateAPIKey creates an API key for the organization
	CreateAPIKey(context.Context, *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error)
	// DeleteAPIKey deletes an API key for the organization
	DeleteAPIKey(context.Context, *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error)
	// RemoveOrganizationMember removes the user from the organization
	RemoveInvitation(context.Context, *connect_go.Request[v1.RemoveInvitationRequest]) (*connect_go.Response[v1.RemoveInvitationResponse], error)
	// GetLatestValidRouterConfig returns the router config for the federated graph
	GetLatestValidRouterConfig(context.Context, *connect_go.Request[v11.GetConfigRequest]) (*connect_go.Response[v11.GetConfigResponse], error)
	// MigrateFromApollo migrates the graphs from apollo to cosmo
	MigrateFromApollo(context.Context, *connect_go.Request[v1.MigrateFromApolloRequest]) (*connect_go.Response[v1.MigrateFromApolloResponse], error)
	GetAnalyticsView(context.Context, *connect_go.Request[v1.GetAnalyticsViewRequest]) (*connect_go.Response[v1.GetAnalyticsViewResponse], error)
	GetDashboardAnalyticsView(context.Context, *connect_go.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect_go.Response[v1.GetDashboardAnalyticsViewResponse], error)
	GetTrace(context.Context, *connect_go.Request[v1.GetTraceRequest]) (*connect_go.Response[v1.GetTraceResponse], error)
}

// NewPlatformServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlatformServiceHandler(svc PlatformServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	platformServiceCreateFederatedGraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceCreateFederatedGraphProcedure,
		svc.CreateFederatedGraph,
		opts...,
	)
	platformServiceCreateFederatedSubgraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceCreateFederatedSubgraphProcedure,
		svc.CreateFederatedSubgraph,
		opts...,
	)
	platformServicePublishFederatedSubgraphHandler := connect_go.NewUnaryHandler(
		PlatformServicePublishFederatedSubgraphProcedure,
		svc.PublishFederatedSubgraph,
		opts...,
	)
	platformServiceDeleteFederatedGraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceDeleteFederatedGraphProcedure,
		svc.DeleteFederatedGraph,
		opts...,
	)
	platformServiceDeleteFederatedSubgraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceDeleteFederatedSubgraphProcedure,
		svc.DeleteFederatedSubgraph,
		opts...,
	)
	platformServiceCheckSubgraphSchemaHandler := connect_go.NewUnaryHandler(
		PlatformServiceCheckSubgraphSchemaProcedure,
		svc.CheckSubgraphSchema,
		opts...,
	)
	platformServiceFixSubgraphSchemaHandler := connect_go.NewUnaryHandler(
		PlatformServiceFixSubgraphSchemaProcedure,
		svc.FixSubgraphSchema,
		opts...,
	)
	platformServiceUpdateFederatedGraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceUpdateFederatedGraphProcedure,
		svc.UpdateFederatedGraph,
		opts...,
	)
	platformServiceUpdateSubgraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceUpdateSubgraphProcedure,
		svc.UpdateSubgraph,
		opts...,
	)
	platformServiceCheckFederatedGraphHandler := connect_go.NewUnaryHandler(
		PlatformServiceCheckFederatedGraphProcedure,
		svc.CheckFederatedGraph,
		opts...,
	)
	platformServiceWhoAmIHandler := connect_go.NewUnaryHandler(
		PlatformServiceWhoAmIProcedure,
		svc.WhoAmI,
		opts...,
	)
	platformServiceGetFederatedGraphsHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetFederatedGraphsProcedure,
		svc.GetFederatedGraphs,
		opts...,
	)
	platformServiceGetFederatedGraphByNameHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetFederatedGraphByNameProcedure,
		svc.GetFederatedGraphByName,
		opts...,
	)
	platformServiceGetFederatedGraphSDLByNameHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetFederatedGraphSDLByNameProcedure,
		svc.GetFederatedGraphSDLByName,
		opts...,
	)
	platformServiceGetSubgraphsHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetSubgraphsProcedure,
		svc.GetSubgraphs,
		opts...,
	)
	platformServiceGetSubgraphByNameHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetSubgraphByNameProcedure,
		svc.GetSubgraphByName,
		opts...,
	)
	platformServiceGetFederatedSubgraphSDLByNameHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetFederatedSubgraphSDLByNameProcedure,
		svc.GetFederatedSubgraphSDLByName,
		opts...,
	)
	platformServiceGetChecksByFederatedGraphNameHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetChecksByFederatedGraphNameProcedure,
		svc.GetChecksByFederatedGraphName,
		opts...,
	)
	platformServiceGetCheckDetailsHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetCheckDetailsProcedure,
		svc.GetCheckDetails,
		opts...,
	)
	platformServiceGetFederatedGraphChangelogHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetFederatedGraphChangelogProcedure,
		svc.GetFederatedGraphChangelog,
		opts...,
	)
	platformServiceCreateFederatedGraphTokenHandler := connect_go.NewUnaryHandler(
		PlatformServiceCreateFederatedGraphTokenProcedure,
		svc.CreateFederatedGraphToken,
		opts...,
	)
	platformServiceGetOrganizationMembersHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetOrganizationMembersProcedure,
		svc.GetOrganizationMembers,
		opts...,
	)
	platformServiceInviteUserHandler := connect_go.NewUnaryHandler(
		PlatformServiceInviteUserProcedure,
		svc.InviteUser,
		opts...,
	)
	platformServiceGetAPIKeysHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetAPIKeysProcedure,
		svc.GetAPIKeys,
		opts...,
	)
	platformServiceCreateAPIKeyHandler := connect_go.NewUnaryHandler(
		PlatformServiceCreateAPIKeyProcedure,
		svc.CreateAPIKey,
		opts...,
	)
	platformServiceDeleteAPIKeyHandler := connect_go.NewUnaryHandler(
		PlatformServiceDeleteAPIKeyProcedure,
		svc.DeleteAPIKey,
		opts...,
	)
	platformServiceRemoveInvitationHandler := connect_go.NewUnaryHandler(
		PlatformServiceRemoveInvitationProcedure,
		svc.RemoveInvitation,
		opts...,
	)
	platformServiceGetLatestValidRouterConfigHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetLatestValidRouterConfigProcedure,
		svc.GetLatestValidRouterConfig,
		opts...,
	)
	platformServiceMigrateFromApolloHandler := connect_go.NewUnaryHandler(
		PlatformServiceMigrateFromApolloProcedure,
		svc.MigrateFromApollo,
		opts...,
	)
	platformServiceGetAnalyticsViewHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetAnalyticsViewProcedure,
		svc.GetAnalyticsView,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	platformServiceGetDashboardAnalyticsViewHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetDashboardAnalyticsViewProcedure,
		svc.GetDashboardAnalyticsView,
		connect_go.WithIdempotency(connect_go.IdempotencyNoSideEffects),
		connect_go.WithHandlerOptions(opts...),
	)
	platformServiceGetTraceHandler := connect_go.NewUnaryHandler(
		PlatformServiceGetTraceProcedure,
		svc.GetTrace,
		opts...,
	)
	return "/wg.cosmo.platform.v1.PlatformService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlatformServiceCreateFederatedGraphProcedure:
			platformServiceCreateFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceCreateFederatedSubgraphProcedure:
			platformServiceCreateFederatedSubgraphHandler.ServeHTTP(w, r)
		case PlatformServicePublishFederatedSubgraphProcedure:
			platformServicePublishFederatedSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteFederatedGraphProcedure:
			platformServiceDeleteFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteFederatedSubgraphProcedure:
			platformServiceDeleteFederatedSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceCheckSubgraphSchemaProcedure:
			platformServiceCheckSubgraphSchemaHandler.ServeHTTP(w, r)
		case PlatformServiceFixSubgraphSchemaProcedure:
			platformServiceFixSubgraphSchemaHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateFederatedGraphProcedure:
			platformServiceUpdateFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceUpdateSubgraphProcedure:
			platformServiceUpdateSubgraphHandler.ServeHTTP(w, r)
		case PlatformServiceCheckFederatedGraphProcedure:
			platformServiceCheckFederatedGraphHandler.ServeHTTP(w, r)
		case PlatformServiceWhoAmIProcedure:
			platformServiceWhoAmIHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphsProcedure:
			platformServiceGetFederatedGraphsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphByNameProcedure:
			platformServiceGetFederatedGraphByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphSDLByNameProcedure:
			platformServiceGetFederatedGraphSDLByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphsProcedure:
			platformServiceGetSubgraphsHandler.ServeHTTP(w, r)
		case PlatformServiceGetSubgraphByNameProcedure:
			platformServiceGetSubgraphByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedSubgraphSDLByNameProcedure:
			platformServiceGetFederatedSubgraphSDLByNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetChecksByFederatedGraphNameProcedure:
			platformServiceGetChecksByFederatedGraphNameHandler.ServeHTTP(w, r)
		case PlatformServiceGetCheckDetailsProcedure:
			platformServiceGetCheckDetailsHandler.ServeHTTP(w, r)
		case PlatformServiceGetFederatedGraphChangelogProcedure:
			platformServiceGetFederatedGraphChangelogHandler.ServeHTTP(w, r)
		case PlatformServiceCreateFederatedGraphTokenProcedure:
			platformServiceCreateFederatedGraphTokenHandler.ServeHTTP(w, r)
		case PlatformServiceGetOrganizationMembersProcedure:
			platformServiceGetOrganizationMembersHandler.ServeHTTP(w, r)
		case PlatformServiceInviteUserProcedure:
			platformServiceInviteUserHandler.ServeHTTP(w, r)
		case PlatformServiceGetAPIKeysProcedure:
			platformServiceGetAPIKeysHandler.ServeHTTP(w, r)
		case PlatformServiceCreateAPIKeyProcedure:
			platformServiceCreateAPIKeyHandler.ServeHTTP(w, r)
		case PlatformServiceDeleteAPIKeyProcedure:
			platformServiceDeleteAPIKeyHandler.ServeHTTP(w, r)
		case PlatformServiceRemoveInvitationProcedure:
			platformServiceRemoveInvitationHandler.ServeHTTP(w, r)
		case PlatformServiceGetLatestValidRouterConfigProcedure:
			platformServiceGetLatestValidRouterConfigHandler.ServeHTTP(w, r)
		case PlatformServiceMigrateFromApolloProcedure:
			platformServiceMigrateFromApolloHandler.ServeHTTP(w, r)
		case PlatformServiceGetAnalyticsViewProcedure:
			platformServiceGetAnalyticsViewHandler.ServeHTTP(w, r)
		case PlatformServiceGetDashboardAnalyticsViewProcedure:
			platformServiceGetDashboardAnalyticsViewHandler.ServeHTTP(w, r)
		case PlatformServiceGetTraceProcedure:
			platformServiceGetTraceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlatformServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlatformServiceHandler struct{}

func (UnimplementedPlatformServiceHandler) CreateFederatedGraph(context.Context, *connect_go.Request[v1.CreateFederatedGraphRequest]) (*connect_go.Response[v1.CreateFederatedGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateFederatedSubgraph(context.Context, *connect_go.Request[v1.CreateFederatedSubgraphRequest]) (*connect_go.Response[v1.CreateFederatedSubgraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFederatedSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) PublishFederatedSubgraph(context.Context, *connect_go.Request[v1.PublishFederatedSubgraphRequest]) (*connect_go.Response[v1.PublishFederatedSubgraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.PublishFederatedSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteFederatedGraph(context.Context, *connect_go.Request[v1.DeleteFederatedGraphRequest]) (*connect_go.Response[v1.DeleteFederatedGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteFederatedSubgraph(context.Context, *connect_go.Request[v1.DeleteFederatedSubgraphRequest]) (*connect_go.Response[v1.DeleteFederatedSubgraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteFederatedSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CheckSubgraphSchema(context.Context, *connect_go.Request[v1.CheckSubgraphSchemaRequest]) (*connect_go.Response[v1.CheckSubgraphSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CheckSubgraphSchema is not implemented"))
}

func (UnimplementedPlatformServiceHandler) FixSubgraphSchema(context.Context, *connect_go.Request[v1.FixSubgraphSchemaRequest]) (*connect_go.Response[v1.FixSubgraphSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.FixSubgraphSchema is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateFederatedGraph(context.Context, *connect_go.Request[v1.UpdateFederatedGraphRequest]) (*connect_go.Response[v1.UpdateFederatedGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) UpdateSubgraph(context.Context, *connect_go.Request[v1.UpdateSubgraphRequest]) (*connect_go.Response[v1.UpdateSubgraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.UpdateSubgraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CheckFederatedGraph(context.Context, *connect_go.Request[v1.CheckFederatedGraphRequest]) (*connect_go.Response[v1.CheckFederatedGraphResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CheckFederatedGraph is not implemented"))
}

func (UnimplementedPlatformServiceHandler) WhoAmI(context.Context, *connect_go.Request[v1.WhoAmIRequest]) (*connect_go.Response[v1.WhoAmIResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.WhoAmI is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphs(context.Context, *connect_go.Request[v1.GetFederatedGraphsRequest]) (*connect_go.Response[v1.GetFederatedGraphsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphByName(context.Context, *connect_go.Request[v1.GetFederatedGraphByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphSDLByName(context.Context, *connect_go.Request[v1.GetFederatedGraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedGraphSDLByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphSDLByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphs(context.Context, *connect_go.Request[v1.GetSubgraphsRequest]) (*connect_go.Response[v1.GetSubgraphsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphs is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetSubgraphByName(context.Context, *connect_go.Request[v1.GetSubgraphByNameRequest]) (*connect_go.Response[v1.GetSubgraphByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetSubgraphByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedSubgraphSDLByName(context.Context, *connect_go.Request[v1.GetFederatedSubgraphSDLByNameRequest]) (*connect_go.Response[v1.GetFederatedSubgraphSDLByNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedSubgraphSDLByName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetChecksByFederatedGraphName(context.Context, *connect_go.Request[v1.GetChecksByFederatedGraphNameRequest]) (*connect_go.Response[v1.GetChecksByFederatedGraphNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetChecksByFederatedGraphName is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetCheckDetails(context.Context, *connect_go.Request[v1.GetCheckDetailsRequest]) (*connect_go.Response[v1.GetCheckDetailsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetCheckDetails is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetFederatedGraphChangelog(context.Context, *connect_go.Request[v1.GetFederatedGraphChangelogRequest]) (*connect_go.Response[v1.GetFederatedGraphChangelogResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetFederatedGraphChangelog is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateFederatedGraphToken(context.Context, *connect_go.Request[v1.CreateFederatedGraphTokenRequest]) (*connect_go.Response[v1.CreateFederatedGraphTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateFederatedGraphToken is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetOrganizationMembers(context.Context, *connect_go.Request[v1.GetOrganizationMembersRequest]) (*connect_go.Response[v1.GetOrganizationMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetOrganizationMembers is not implemented"))
}

func (UnimplementedPlatformServiceHandler) InviteUser(context.Context, *connect_go.Request[v1.InviteUserRequest]) (*connect_go.Response[v1.InviteUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.InviteUser is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAPIKeys(context.Context, *connect_go.Request[v1.GetAPIKeysRequest]) (*connect_go.Response[v1.GetAPIKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAPIKeys is not implemented"))
}

func (UnimplementedPlatformServiceHandler) CreateAPIKey(context.Context, *connect_go.Request[v1.CreateAPIKeyRequest]) (*connect_go.Response[v1.CreateAPIKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.CreateAPIKey is not implemented"))
}

func (UnimplementedPlatformServiceHandler) DeleteAPIKey(context.Context, *connect_go.Request[v1.DeleteAPIKeyRequest]) (*connect_go.Response[v1.DeleteAPIKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.DeleteAPIKey is not implemented"))
}

func (UnimplementedPlatformServiceHandler) RemoveInvitation(context.Context, *connect_go.Request[v1.RemoveInvitationRequest]) (*connect_go.Response[v1.RemoveInvitationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.RemoveInvitation is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetLatestValidRouterConfig(context.Context, *connect_go.Request[v11.GetConfigRequest]) (*connect_go.Response[v11.GetConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetLatestValidRouterConfig is not implemented"))
}

func (UnimplementedPlatformServiceHandler) MigrateFromApollo(context.Context, *connect_go.Request[v1.MigrateFromApolloRequest]) (*connect_go.Response[v1.MigrateFromApolloResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.MigrateFromApollo is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetAnalyticsView(context.Context, *connect_go.Request[v1.GetAnalyticsViewRequest]) (*connect_go.Response[v1.GetAnalyticsViewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetAnalyticsView is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetDashboardAnalyticsView(context.Context, *connect_go.Request[v1.GetDashboardAnalyticsViewRequest]) (*connect_go.Response[v1.GetDashboardAnalyticsViewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetDashboardAnalyticsView is not implemented"))
}

func (UnimplementedPlatformServiceHandler) GetTrace(context.Context, *connect_go.Request[v1.GetTraceRequest]) (*connect_go.Response[v1.GetTraceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("wg.cosmo.platform.v1.PlatformService.GetTrace is not implemented"))
}
